
import pickle
import os.path
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from google.auth.transport.requests import Request
import datetime

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
SCOPES = ['https://www.googleapis.com/auth/calendar']

# --- –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ credentials.json ---
script_dir = os.path.dirname(os.path.abspath(__file__))
CREDENTIALS_PATH = os.path.join(script_dir, 'credentials.json')
TOKEN_PATH = os.path.join(script_dir, 'token.pickle')

# --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è token.pickle ---
def create_token():
    if not os.path.exists(CREDENTIALS_PATH):
        print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª credentials.json –∑–∞ —à–ª—è—Ö–æ–º: {CREDENTIALS_PATH}")
        return
    flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_PATH, SCOPES)
    creds = flow.run_local_server(port=0)
    with open(TOKEN_PATH, 'wb') as token:
        pickle.dump(creds, token)
    print("‚úÖ –§–∞–π–ª token.pickle —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ ---
def load_credentials():
    creds = None
    if os.path.exists(TOKEN_PATH):
        with open(TOKEN_PATH, 'rb') as token:
            creds = pickle.load(token)
    # –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è ‚Äî –æ–Ω–æ–≤–∏—Ç–∏
    if creds and creds.expired and creds.refresh_token:
        creds.refresh(Request())
    return creds

# --- –í–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–π–±–ª–∏–∂—á–∏—Ö –ø–æ–¥—ñ–π ---
def show_upcoming_events():
    creds = load_credentials()
    if not creds:
        print("‚ùå –ù–µ–º–∞—î –¥—ñ–π—Å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å create_token().")
        return

    service = build('calendar', 'v3', credentials=creds)
    now = datetime.datetime.utcnow().isoformat() + 'Z'  # 'Z' –æ–∑–Ω–∞—á–∞—î UTC
    print('üîé –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö 10 –ø–æ–¥—ñ–π...')

    events_result = service.events().list(
        calendarId='primary', timeMin=now,
        maxResults=10, singleEvents=True,
        orderBy='startTime'
    ).execute()
    events = events_result.get('items', [])

    if not events:
        print('üì≠ –ü–æ–¥—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
        return

    for event in events:
        start = event['start'].get('dateTime', event['start'].get('date'))
        print(f"üìÖ {start} ‚Äî {event['summary']}")

if __name__ == '__main__':
    # –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —Ç–æ–∫–µ–Ω, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
    if not os.path.exists(TOKEN_PATH):
        create_token()
    else:
        show_upcoming_events()
